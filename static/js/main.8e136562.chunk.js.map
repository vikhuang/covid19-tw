{"version":3,"sources":["control-panel.js","pins.js","caseInfo.js","App.js","reportWebVitals.js","index.js"],"names":["ControlPanel","props","info","caseName","case","spotName","spot","address","pulishBy","byDate","date","byTime","time","link","pulishByLink","dateFormat","moment","defaultFormat","dateNow","datetoNow","diff","toNow","console","log","className","style","spotNameStyle","addressStyle","caseNameStyle","target","href","React","fontWeight","fontSize","Pins","data","onClick","useState","active","setActive","today","map","index","longitude","latitude","height","viewBox","cursor","opacity","fill","stroke","transform","d","geolocateStyle","top","left","padding","fullscreenControlStyle","navStyle","scaleControlStyle","bottom","App","zoom","bearing","pitch","viewport","setViewport","popupInfo","setPopupInfo","width","onViewportChange","mapStyle","mapboxApiAccessToken","CASES","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e136562.chunk.js","sourcesContent":["import * as React from 'react';\nimport moment from 'moment';\nimport Moment from 'react-moment';\n\n\n\nfunction ControlPanel(props) {\n  const {info} = props;\n    const caseName = `案${info.case}`;\n    const spotName = `${info.spot}`;\n    const address = `${info.address}`;\n    const pulishBy = `${info.pulishBy}`;\n    const byDate = `${info.date}`;\n    const byTime = `${info.time}`;\n    const link = `${info.pulishByLink}`;\n\n    let dateFormat = moment([`${byDate}`],moment.defaultFormat) \n    let dateNow = moment()\n    let datetoNow = (dateFormat.diff(dateNow,'days')) / 1\n    let toNow = moment(`${byDate}`).toNow(); \n\n    {console.log({info})}\n\n\n  return (\n    <div className=\"control-panel\">\n      <p style={spotNameStyle}> {spotName} </p>\n      <p style={addressStyle}> {address} </p>\n      <p style={caseNameStyle}> {caseName} </p>\n      <p style={addressStyle}> {byDate} |  {byTime} | {toNow} | </p>\n      <p style={addressStyle}>\n       {/* <Moment toNow>{fromNow}</Moment> */}\n       {datetoNow}\n                  \n      </p>\n      <p></p>  \n      <p>\n        足跡細節 : {' '}\n        <a target=\"_new\" href= {link}>\n          {pulishBy}\n        </a>\n      </p>\n      <div className=\"source-link\">\n        <a\n          href=\"https://www.cdc.gov.tw/\"\n          target=\"_new\"\n        >\n          前往疾管署網站 ↗\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(ControlPanel);\n\n\nconst spotNameStyle = {\n  fontWeight: \"700\",\n  fontSize: \"16px\"\n}\n\nconst caseNameStyle = {\n  fontWeight: \"500\",\n  fontSize: \"14px\"\n}\n\nconst addressStyle = {\n  fontWeight: \"300\",\n  fontSize: \"12px\"\n}","import * as React from 'react';\nimport {useState} from 'react';\nimport {Marker} from 'react-map-gl';\nimport _ from 'lodash';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport Moment from 'react-moment';\nimport { render } from '@testing-library/react';\n\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\n\n\n// const MarkerStyle = styled.svg`\n// height: 20;\n// viewBox: 0 0 24 24;\n// fill: ${props => props.testColor};\n// cursor: pointer;\n// stroke: none;\n// ${({ active }) => active &&\n//   `\n//   fill: blue;\n//   `\n// }\n// `;\n\n// Important for perf: the markers never change, avoid rerender when the map viewport changes\nfunction Pins(props) {\n  const {data, onClick} = props;\n  const [active, setActive ] = useState(data[0]);\n\n  let today = moment();\n  const diff = (date) => { return (moment([date],moment.defaultFormat)).diff(today, 'days')}\n  // const datetoNow = (date) => {byDateFormat(date).diff(dateNow,'days')}\n\n  {console.log(diff('2021/5/10'))}\n\n  return data.map((spot, index) => (\n    \n    <Marker key={`marker-${index}`} longitude={spot.longitude} latitude={spot.latitude}>\n      <svg\n        height= '20'\n        viewBox=\"0 0 24 24\"\n        // style={{\n        //   cursor: 'pointer',\n        //   fill: `${active}` === `${spot}` ? `${pin}` : 'blue',\n        //   stroke: 'none',\n        //   transform: `translate(-10px,-20px)`\n        // }}\n        cursor= 'pointer'\n        opacity= {1 + (diff(spot.date))  * 0.04}\n        fill= {active === spot ? 'blue' : '#d00'}\n        stroke= 'none'\n        transform= 'translate(-10, -20)'\n        onClick={()=>onClick(spot, setActive(spot),console.log(spot.date))}\n      >\n        <path d={ICON} />\n      </svg>\n\n    </Marker>\n  ));\n}\n\nexport default React.memo(Pins);\n\n// active={active === spot};\n//       onClick={()=>onClick(spot, setActive(spot))};\n\n","import * as React from 'react';\n\n//case\tspot\tspotInfo\tcounty\tdistrict\taddress\tdate\ttime\tlangitude\tlongitude\tpulishBy\tpulishByLink\tupdateTime\tnot\n\nfunction CaseInfo(props) {\n  const {info} = props;\n    const caseName = `案${info.case}`;\n    const pulishBy = `${info.pulishBy}`;\n    const link = `${info.pulishByLink}`;\n\n  return (\n    <div>\n      <div>\n        {caseName}  |{' '}\n        <a\n          target=\"_new\"\n          href= {link}\n        >\n          {pulishBy}\n        </a>\n      </div>\n      <img width={240} src={info.image} />\n    </div>\n  );\n}\n\nexport default React.memo(CaseInfo);\n\n\n//{`http://en.wikipedia.org/w/index.php?title=Special:Search&search=${displayName}`}\n","import * as React from 'react';\nimport { useState } from 'react';\nimport {render} from 'react-dom';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport ReactMapGL, {\n  Popup,\n  NavigationControl,\n  FullscreenControl,\n  ScaleControl,\n  GeolocateControl\n} from 'react-map-gl';\n\nimport ControlPanel from './control-panel';\nimport Pins from './pins';\nimport CaseInfo from './caseInfo';\n\nimport CASES from './data.json';\n\nconst TOKEN = 'pk.eyJ1Ijoidmlra3lodWFuZyIsImEiOiJjaXpxZGFwejkwMGh6MnBvYWU4amNmbnlmIn0._kb6jGtKy9mU8jbVmOvrcQ'; \n\nconst geolocateStyle = {\n  top: 0,\n  left: 0,\n  padding: '10px'\n};\n\nconst fullscreenControlStyle = {\n  top: 36,\n  left: 0,\n  padding: '10px'\n};\n\nconst navStyle = {\n  top: 72,\n  left: 0,\n  padding: '10px'\n};\n\nconst scaleControlStyle = {\n  bottom: 36,\n  left: 0,\n  padding: '10px'\n};\n\nexport default function App() {\n  const [viewport, setViewport] = useState({\n    latitude: 25.04,\n    longitude: 121.512,\n    zoom: 10,\n    bearing: 0,\n    pitch: 0\n  });\n\n\n  const [popupInfo, setPopupInfo] = useState(null);\n\n  return (\n    <div>\n      <ReactMapGL\n        {...viewport}\n        width=\"100vw\"\n        height=\"100vh\"\n        // mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n        onViewportChange={setViewport}\n        mapStyle = 'mapbox://styles/vikkyhuang/ckotu75r84cuj17o539elm200'\n        mapboxApiAccessToken={TOKEN}\n      >\n        <Pins data={CASES} onClick={setPopupInfo} />\n\n        {/* {popupInfo && (\n          <Popup\n            tipSize={5}\n            anchor=\"top\"\n            longitude={popupInfo.longitude}\n            latitude={popupInfo.latitude}\n            closeOnClick={false}\n            onClose={setPopupInfo}\n          >\n            {console.log({popupInfo})}\n            <CaseInfo info={popupInfo} />\n          </Popup>\n        )} */}\n\n        <GeolocateControl style={geolocateStyle} />\n        <FullscreenControl style={fullscreenControlStyle} />\n        <NavigationControl style={navStyle} />\n        <ScaleControl style={scaleControlStyle} />\n      </ReactMapGL>\n\n      {popupInfo && (<ControlPanel info={popupInfo} />)}\n    </div>\n  );\n}\n\n\n\n\n // const TOKEN = 'pk.eyJ1Ijoidmlra3lodWFuZyIsImEiOiJjaXpxZGFwejkwMGh6MnBvYWU4amNmbnlmIn0._kb6jGtKy9mU8jbVmOvrcQ'; ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}